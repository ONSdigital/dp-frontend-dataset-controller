// Code generated by MockGen. DO NOT EDIT.
// Source: handlers/zebedee.go

// Package handlers is a generated GoMock package.
package handlers

import (
	data "github.com/ONSdigital/go-ns/zebedee/data"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockZebedeeClient is a mock of ZebedeeClient interface
type MockZebedeeClient struct {
	ctrl     *gomock.Controller
	recorder *MockZebedeeClientMockRecorder
}

// MockZebedeeClientMockRecorder is the mock recorder for MockZebedeeClient
type MockZebedeeClientMockRecorder struct {
	mock *MockZebedeeClient
}

// NewMockZebedeeClient creates a new mock instance
func NewMockZebedeeClient(ctrl *gomock.Controller) *MockZebedeeClient {
	mock := &MockZebedeeClient{ctrl: ctrl}
	mock.recorder = &MockZebedeeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZebedeeClient) EXPECT() *MockZebedeeClientMockRecorder {
	return m.recorder
}

// SetAccessToken mocks base method
func (m *MockZebedeeClient) SetAccessToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccessToken", arg0)
}

// SetAccessToken indicates an expected call of SetAccessToken
func (mr *MockZebedeeClientMockRecorder) SetAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockZebedeeClient)(nil).SetAccessToken), arg0)
}

// GetBreadcrumb mocks base method
func (m *MockZebedeeClient) GetBreadcrumb(arg0 string) ([]data.Breadcrumb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBreadcrumb", arg0)
	ret0, _ := ret[0].([]data.Breadcrumb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBreadcrumb indicates an expected call of GetBreadcrumb
func (mr *MockZebedeeClientMockRecorder) GetBreadcrumb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBreadcrumb", reflect.TypeOf((*MockZebedeeClient)(nil).GetBreadcrumb), arg0)
}

// Get mocks base method
func (m *MockZebedeeClient) Get(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockZebedeeClientMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZebedeeClient)(nil).Get), arg0)
}

// GetDatasetLandingPage mocks base method
func (m *MockZebedeeClient) GetDatasetLandingPage(arg0 string) (data.DatasetLandingPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetLandingPage", arg0)
	ret0, _ := ret[0].(data.DatasetLandingPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetLandingPage indicates an expected call of GetDatasetLandingPage
func (mr *MockZebedeeClientMockRecorder) GetDatasetLandingPage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetLandingPage", reflect.TypeOf((*MockZebedeeClient)(nil).GetDatasetLandingPage), arg0)
}

// GetDataset mocks base method
func (m *MockZebedeeClient) GetDataset(arg0 string) (data.Dataset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataset", arg0)
	ret0, _ := ret[0].(data.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset
func (mr *MockZebedeeClientMockRecorder) GetDataset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockZebedeeClient)(nil).GetDataset), arg0)
}

// Healthcheck mocks base method
func (m *MockZebedeeClient) Healthcheck() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthcheck")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockZebedeeClientMockRecorder) Healthcheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockZebedeeClient)(nil).Healthcheck))
}
